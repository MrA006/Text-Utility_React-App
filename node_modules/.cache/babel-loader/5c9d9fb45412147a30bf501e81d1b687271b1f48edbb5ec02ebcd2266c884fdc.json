{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anusa\\\\Desktop\\\\React\\\\my-app\\\\src\\\\components\\\\preview.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Preview = props => {\n  let words = props.text.split(' ');\n  if (props.text.slice(-1) === ' ') {\n    words -= 1;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [props.text.length, \" characters and \", words, \" words\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c = Preview;\nexport default Preview;\nvar _c;\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Preview","props","words","text","split","slice","children","className","length","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/anusa/Desktop/React/my-app/src/components/preview.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Preview = (props) => {\r\n  \r\n  let words = props.text.split(' ');\r\n\r\n  if(props.text.slice(-1) === ' '){\r\n    words -= 1;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='container'>{props.text.length} characters and {words} words</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preview\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAEzB,IAAIC,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;EAEjC,IAAGH,KAAK,CAACE,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAC;IAC9BH,KAAK,IAAI,CAAC;EACZ;EAEA,oBACEH,OAAA;IAAAO,QAAA,eACEP,OAAA;MAAKQ,SAAS,EAAC,WAAW;MAAAD,QAAA,GAAEL,KAAK,CAACE,IAAI,CAACK,MAAM,EAAC,kBAAgB,EAACN,KAAK,EAAC,QAAM;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9E,CAAC;AAEV,CAAC;AAAAC,EAAA,GAbKb,OAAO;AAeb,eAAeA,OAAO;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}